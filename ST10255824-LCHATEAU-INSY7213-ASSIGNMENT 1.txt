--Question 2

CREATE TABLE Delivery_Items (
    Delivery_Item INT PRIMARY KEY,
    Description VARCHAR(255) NOT NULL,
    Staff_ID INT NOT NULL
);

CREATE TABLE Driver (
    Driver_ID INT PRIMARY KEY,
    First_Name VARCHAR(100) NOT NULL,
    Surname VARCHAR(100) NOT NULL,
    Driver_Code VARCHAR(10) NOT NULL,
    Phone_Num VARCHAR(15),
    Address VARCHAR(255)
);

CREATE TABLE Driver_Deliveries (
    Driver_Delivery_ID INT PRIMARY KEY,
    VIN_Number VARCHAR(20) NOT NULL,
    Driver_ID INT NOT NULL,
    Delivery_Item_ID INT NOT NULL,
    FOREIGN KEY (Driver_ID) REFERENCES Driver(Driver_ID),
    FOREIGN KEY (Delivery_Item_ID) REFERENCES Delivery_Items(Delivery_Item)
);

CREATE TABLE Staff (
    Staff_ID INT PRIMARY KEY,
    First_Name VARCHAR(100) NOT NULL,
    Surname VARCHAR(100) NOT NULL,
    Position VARCHAR(100) NOT NULL,
    Phone_Num VARCHAR(15),
    Address VARCHAR(255),
    Email VARCHAR(100) UNIQUE
);

CREATE TABLE Vehicle (
    VIN_Number VARCHAR(20) PRIMARY KEY,
    Vehicle_Type VARCHAR(100) NOT NULL,
    Mileage INT NOT NULL,
    Colour VARCHAR(50),
    Manufacturer VARCHAR(50)
);

CREATE TABLE Customer (
    Customer_ID INT PRIMARY KEY,
    First_Name VARCHAR(100) NOT NULL,
    Surname VARCHAR(100) NOT NULL,
    Address VARCHAR(255),
    Phone_Num VARCHAR(15),
    Email VARCHAR(100) UNIQUE
);


CREATE TABLE Billing (
    Bill_ID INT PRIMARY KEY,
    Customer_ID INT NOT NULL,
    Staff_ID INT NOT NULL,
    Bill_Date DATE NOT NULL,
    FOREIGN KEY (Customer_ID) REFERENCES Customer(Customer_ID),
    FOREIGN KEY (Staff_ID) REFERENCES Staff(Staff_ID)
);

--Question 3.1
CREATE USER John IDENTIFIED BY Johnch2024;
GRANT CREATE SESSION TO John;
GRANT Select ANY TABLE TO John;


CREATE USER Hannah IDENTIFIED BY Hannahch2024;
GRANT CREATE SESSION TO Hannah;
GRANT INSERT ANY TABLE TO Hannah;


--Question 4.1

SET SERVEROUTPUT ON;

BEGIN
    FOR rec IN (
        SELECT d.First_Name, d.Surname, d.Driver_Code, v.VIN_Number, v.Mileage
        FROM Driver d
        JOIN Driver_Deliveries dd ON d.Driver_ID = dd.Driver_ID
        JOIN Vehicle v ON dd.VIN_Number = v.VIN_Number
        WHERE v.Mileage < 80000
    ) LOOP
        DBMS_OUTPUT.PUT_LINE('DRIVER: ' || rec.First_Name || ', ' || rec.Surname);
        DBMS_OUTPUT.PUT_LINE('CODE: ' || rec.Driver_Code);
        DBMS_OUTPUT.PUT_LINE('VIN NUMBER: ' || rec.VIN_Number);
        DBMS_OUTPUT.PUT_LINE('MILEAGE: ' || rec.Mileage);
        DBMS_OUTPUT.PUT_LINE(''); -- blank line between records
    END LOOP;
END;
/

--Question 5.1

SET SERVEROUTPUT ON;

DECLARE
    v_staff_id Staff.Staff_ID%TYPE;
    v_first_name Staff.First_Name%TYPE;
    v_surname Staff.Surname%TYPE;
    v_deliveries NUMBER;
BEGIN
    -- Select the staff member(s) with the maximum number of deliveries
    SELECT Staff_ID, First_Name, Surname, delivery_count
    INTO v_staff_id, v_first_name, v_surname, v_deliveries
    FROM (
        SELECT s.Staff_ID, s.First_Name, s.Surname, COUNT(d.Delivery_Item) AS delivery_count
        FROM Staff s
        JOIN Delivery_Items d ON s.Staff_ID = d.STAFF_ID
        GROUP BY s.Staff_ID, s.First_Name, s.Surname
        ORDER BY delivery_count DESC
    )
    WHERE ROWNUM = 1;  -- Pick the top staff member

    
    DBMS_OUTPUT.PUT_LINE('STAFF ID: ' || v_staff_id);
    DBMS_OUTPUT.PUT_LINE('FIRST NAME: ' || v_first_name);
    DBMS_OUTPUT.PUT_LINE('SURNAME: ' || v_surname);
    DBMS_OUTPUT.PUT_LINE('DELIVERIES PROCESSED: ' || v_deliveries);
END;
/

--Question 5.3.2

-- Create a view to show staff and their delivery counts
CREATE OR REPLACE VIEW TopStaffDeliveriesView AS
SELECT s.Staff_ID, s.First_Name, s.Surname, COUNT(d.Delivery_Item) AS Deliveries_Processed
FROM Staff s
JOIN Delivery_Items d ON s.Staff_ID = d.Staff_ID
GROUP BY s.Staff_ID, s.First_Name, s.Surname;

-- PL/SQL block to pull the staff member with the most deliveries from the view
SET SERVEROUTPUT ON;

DECLARE
    v_staff_id Staff.Staff_ID%TYPE;
    v_first_name Staff.First_Name%TYPE;
    v_surname Staff.Surname%TYPE;
    v_deliveries NUMBER;
BEGIN
    -- Select the staff member with the highest number of deliveries
    SELECT Staff_ID, First_Name, Surname, Deliveries_Processed
    INTO v_staff_id, v_first_name, v_surname, v_deliveries
    FROM (
        SELECT Staff_ID, First_Name, Surname, Deliveries_Processed
        FROM TopStaffDeliveriesView
        ORDER BY Deliveries_Processed DESC
    )
    WHERE ROWNUM = 1;


    DBMS_OUTPUT.PUT_LINE('STAFF ID: ' || v_staff_id);
    DBMS_OUTPUT.PUT_LINE('FIRST NAME: ' || v_first_name);
    DBMS_OUTPUT.PUT_LINE('SURNAME: ' || v_surname);
    DBMS_OUTPUT.PUT_LINE('DELIVERIES PROCESSED: ' || v_deliveries);
END;
/
--Question 6.1
DECLARE
  v_count INTEGER;
BEGIN
  -- Count the number of deliveries processed by staff with ID 51014
  SELECT COUNT(*) INTO v_count
  FROM delivery_items
  WHERE staff_id = 51014;

  -- Use implicit cursor attribute to check if any rows were returned
  IF SQL%FOUND THEN
    DBMS_OUTPUT.PUT_LINE('Staff 51014 has processed ' || v_count || ' deliveries.');
  ELSE
    DBMS_OUTPUT.PUT_LINE('No deliveries found for staff 51014.');
  END IF;
END;

--Question 6.1
DECLARE
  -- Declare a cursor to fetch deliveries for driver ID 81011
  CURSOR driver_deliveries_cursor IS
    SELECT dd.driver_delivery_id, dd.vin_number, dd.delivery_item_id
    FROM driver_deliveries dd
    WHERE dd.driver_id = 81011;

  -- Variables to hold the fetched data
  v_delivery_id driver_deliveries.driver_delivery_id%TYPE;
  v_vin_number driver_deliveries.vin_number%TYPE;
  v_delivery_item_id driver_deliveries.delivery_item_id%TYPE;
BEGIN
  -- Open the cursor
  OPEN driver_deliveries_cursor;

  -- Loop through all fetched rows
  LOOP
    FETCH driver_deliveries_cursor INTO v_delivery_id, v_vin_number, v_delivery_item_id;
    EXIT WHEN driver_deliveries_cursor%NOTFOUND;  -- Exit when no more rows

    -- Display each delivery record for the driver
    DBMS_OUTPUT.PUT_LINE('Delivery ID: ' || v_delivery_id ||
                         ', VIN: ' || v_vin_number ||
                         ', Delivery Item ID: ' || v_delivery_item_id);
  END LOOP;

  -- Close the cursor
  CLOSE driver_deliveries_cursor;
END;

--Question 6.2

-- Create a sequence for BILL_ID
CREATE SEQUENCE bill_seq
    START WITH 1000
    INCREMENT BY 1
    NOCACHE;

-- Use the sequence when inserting a new bill
INSERT INTO Billing (Bill_ID, Customer_ID, Staff_ID, Bill_Date)
VALUES (bill_seq.NEXTVAL, 11011, 51014, SYSDATE);

-- Check result
SELECT * FROM Billing WHERE Bill_ID >= 1000;
